name: GitHub Classroom Workflow
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
jobs:
  # unit-test:
  #   name: Run go unit tests
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #       with:
  #         fetch-depth: 0

  #     - name: Set up Go
  #       uses: actions/setup-go@v4
  #       with:
  #         go-version: '1.21.3'
  #         cache-dependency-path: src/go.sum

  #     - name: Test
  #       run: cd v4/src && make test

  # build:
  #   name: 'Build & Publish'
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v3
  #       with:
  #         fetch-depth: 0

  #     - name: Set up QEMU
  #       uses: docker/setup-qemu-action@v1

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v1

  #     - name: Login to Docker Hub
  #       uses: docker/login-action@v2
  #       with:
  #         username: ${{ secrets.DOCKER_HUB_USERNAME }}
  #         password: ${{ secrets.DOCKER_HUB_TOKEN }}

  #     - name: "Build&Publish images"
  #       uses: docker/build-push-action@v2
  #       with:
  #         push: true
  #         tags: |
  #           ${{ github.repository_owner }}/library-apiserver:${{ github.sha }}
  #           ${{ github.repository_owner }}/library-apiserver:latest
  #           ${{ github.repository_owner }}/library-ratingapi::${{ github.sha }}
  #           ${{ github.repository_owner }}/library-ratingapi::latest
  #           ${{ github.repository_owner }}/library-libraryapi::latest
  #           ${{ github.repository_owner }}/library-libraryapi::latest
  #           ${{ github.repository_owner }}/library-reservationapi::latest
  #           ${{ github.repository_owner }}/library-reservationapi::latest

  deploy:
    # needs: [unit-test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Write out the kubeconfig info
        run: |
          echo ${{ secrets.KUBE_CONFIG }} | base64 -d > /tmp/config
          chmod 0600 /tmp/config

      - name: Instal deps
        run: curl -sSL https://hub.mcs.mail.ru/repository/client-keystone-auth/latest/linux/client-install.sh | bash

      - name: Lint Helm
        run: |
          helm lint ./v4/k8s/postgres-chart/
          helm lint ./v4/k8s/rsoi4-chart/

      - name: Deploy DB
        env:
          KUBECONFIG: /tmp/config
        run: |
          source ~/vk-cloud-solutions/path.bash.inc
          helm upgrade storage ./v4/k8s/postgres-chart/ --install --wait --atomic --namespace=dev --values=./v4/k8s/postgres-chart/values.yaml

      # - name: Deploy API
        # env:
        #   KUBECONFIG: /tmp/config
        # run: |
        #   source ~/vk-cloud-solutions/path.bash.inc
        #   helm upgrade library ./v4/k8s/rsoi4-chart/ --install --wait --atomic --namespace=dev --values=./v4/k8s/rsoi4-chart/values.yaml

      - name: Cleanup kubeconfig info
        if: success() || failure()
        run: rm -f /tmp/config


  # integration-test:
  #   name: Run integration tests
  #   runs-on: ubuntu-latest
  #   needs: [build]
  #   timeout-minutes: 15
  #   steps:
  #     - uses: actions/checkout@v3
  #       with:
  #         fetch-depth: 0

  #     - uses: docker/setup-buildx-action@v2

  #     - name: Download gateway image
  #       uses: ishworkh/container-image-artifact-download@v1.0.0
  #       with:
  #         image: "migregal/library-apiserver:${{ github.sha }}"
  #     - name: Download ratings image
  #       uses: ishworkh/container-image-artifact-download@v1.0.0
  #       with:
  #         image: "migregal/library-ratingapi:${{ github.sha }}"
  #     - name: Download library image
  #       uses: ishworkh/container-image-artifact-download@v1.0.0
  #       with:
  #         image: "migregal/library-libraryapi:${{ github.sha }}"
  #     - name: Download reservation image
  #       uses: ishworkh/container-image-artifact-download@v1.0.0
  #       with:
  #         image: "migregal/library-reservationapi:${{ github.sha }}"

  #     - name: Run containers
  #       timeout-minutes: 5
  #       run: |
  #         export TAG=${{ github.sha }}
  #         docker compose -f docker-compose.yml up -d --wait --wait-timeout 120

  #     - name: Collect docker logs on failure
  #       if: "!success()"
  #       uses: jwalton/gh-docker-logs@v2
  #       with:
  #         dest: './logs-docs'

  #     - name: Upload logs to GitHub
  #       if: "!success()"
  #       uses: actions/upload-artifact@master
  #       with:
  #         name: logs-docs
  #         path: ./logs-docs/*

  #     - name: Run API Tests
  #       uses: matt-ball/newman-action@master
  #       with:
  #         collection: v4/postman/collection.json
  #         environment: v4/postman/environment.json
  #         delayRequest: 100
  #         reporters: '[ "cli" ]'

  #     - name: Stop containers
  #       if: always()
  #       continue-on-error: true
  #       run: |
  #         export TAG=${{ github.sha }}
  #         docker compose -f docker-compose.yml down -v

  # autograde:
  #   name: Autograding
  #   runs-on: ubuntu-latest
  #   needs: [integration-test]
  #   steps:
  #     - uses: education/autograding@v1
  #       id: autograder
  #       continue-on-error: true

  #     - name: Github auto grader mark
  #       uses: Romanow/google-sheet-autograder-marker@v1.0
  #       with:
  #         google_token: ${{secrets.GOOGLE_API_KEY}}
  #         sheet_id: "1xkgjUX6Qmk7rdJG-QPOToav-HWWtthJjnShIKnw3oIY"
  #         homework_number: 4
  #         user_column: 'D'
  #         column_offset: 'F'
  #         mark: "'+"
